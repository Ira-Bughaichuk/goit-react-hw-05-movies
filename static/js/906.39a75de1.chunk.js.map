{"version":3,"file":"static/js/906.39a75de1.chunk.js","mappings":"mRAEaA,EAAWC,EAAAA,GAAAA,GAAH,gEAIRC,EAAaD,EAAAA,GAAAA,KAAH,6C,SCiCvB,EAhCgB,WACd,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,8GAEQC,EAAAA,EAAAA,IAAWP,GAFnB,OAEXQ,EAFW,OAGjBJ,EAAWI,EAAWC,QAAQC,OAAO,EAAG,IAHvB,gDAKjBC,MAAM,KAAMC,SALK,yDAAH,qDAQlBN,GACD,GAAE,CAACN,IAEuB,KAAb,OAAPG,QAAO,IAAPA,OAAA,EAAAA,EAASU,SACd,sEAEA,wBACGV,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACX,UAACnB,EAAD,YACE,0BACE,SAACE,EAAD,sBADF,IACoCgB,MAEpC,uBAAIC,MAJSD,EADJ,KAUlB,C,yLCnCKE,E,QAAgBC,EAAAA,OAAa,CACjCC,QAAS,+BACTC,OAAQ,CACNC,KAAM,EACNC,QAAS,sCAIAC,EAAgB,mCAAG,sGACPN,EAAcO,IAAI,sBADX,uBACtBC,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,qDAIhBC,EAAS,mCAAG,WAAMN,GAAN,yFACAH,EAAcO,IAAd,eAAkC,CAAEJ,OAAAA,IADpC,uBACfK,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAITE,EAAW,mCAAG,WAAMC,GAAN,yFACFX,EAAcO,IAAd,gBAA2BI,IADzB,uBACjBH,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAIXI,EAAU,mCAAG,WAAMD,GAAN,yFACDX,EAAcO,IAAd,gBAA2BI,EAA3B,aADC,uBAChBH,EADgB,EAChBA,KADgB,kBAEjBA,EAAKK,MAFY,2CAAH,sDAIVvB,EAAU,mCAAG,WAAMqB,GAAN,yFACDX,EAAcO,IAAd,gBAA2BI,EAA3B,aADC,uBAChBH,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,qD","sources":["components/Reviews/Reviews.styles.js","components/Reviews/Reviews.jsx","services/filmsAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewLi = styled.li`\n  list-style: none;\n  margin: 20px 0;\n`;\nexport const ReviewSpan = styled.span`\n  font-weight: 700;\n`;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getReviews } from 'services/filmsAPI';\n\nimport { ReviewLi, ReviewSpan } from './Reviews.styles';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const dataReview = await getReviews(movieId);\n        setReviews(dataReview.results.splice(0, 2));\n      } catch (error) {\n        alert(error.message);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return reviews?.length === 0 ? (\n    <p>We don't have any reviews for this movies</p>\n  ) : (\n    <ul>\n      {reviews.map(({ author, content }) => (\n        <ReviewLi key={author}>\n          <p>\n            <ReviewSpan>Author:</ReviewSpan> {author}\n          </p>\n          <p>{content}</p>\n        </ReviewLi>\n      ))}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst trendingFilms = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    page: 1,\n    api_key: 'b3f8ab5a3b3d716ab8a62d65695cca6b',\n  },\n});\n\nexport const getTrendingFilms = async () => {\n  const { data } = await trendingFilms.get('trending/movie/day');\n  return data;\n};\nexport const getSearch = async params => {\n  const { data } = await trendingFilms.get(`search/movie`, { params });\n  return data;\n};\nexport const getFilmById = async id => {\n  const { data } = await trendingFilms.get(`movie/${id}`);\n  return data;\n};\nexport const getCredits = async id => {\n  const { data } = await trendingFilms.get(`movie/${id}/credits`);\n  return data.cast;\n};\nexport const getReviews = async id => {\n  const { data } = await trendingFilms.get(`movie/${id}/reviews`);\n  return data;\n};\n\n// const BASE_URL = 'https://api.themoviedb.org/3/';\n// const API_KEY = 'b3f8ab5a3b3d716ab8a62d65695cca6b';\n\n// export const getTrendingFilms = async page => {\n//   const { data } = await axios.get(\n//     `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`\n//   );\n//   //console.log(data.results);\n//   return data;\n// };\n"],"names":["ReviewLi","styled","ReviewSpan","movieId","useParams","useState","reviews","setReviews","useEffect","fetchReviews","getReviews","dataReview","results","splice","alert","message","length","map","author","content","trendingFilms","axios","baseURL","params","page","api_key","getTrendingFilms","get","data","getSearch","getFilmById","id","getCredits","cast"],"sourceRoot":""}